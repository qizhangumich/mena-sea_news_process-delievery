name: SEA News Delivery

on:
  schedule:
    # Run news_delivery.py at 19:30 UTC+8 (11:30 UTC)
    - cron: '30 11 * * *'
  workflow_dispatch:

jobs:
  deliver-news:
    name: Deliver News Articles
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > firebase-service-account.json
        # Verify JSON is valid
        python -c "import json; json.load(open('firebase-service-account.json'))"
        echo "GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json" >> $GITHUB_ENV
    
    - name: Create .env file
      run: |
        echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
        echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
        echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
        echo "EMAIL_RECIPIENTS=${{ secrets.EMAIL_RECIPIENTS }}" >> .env
        echo "GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json" >> .env
    
    - name: Run news_delivery.py with tracking
      run: |
        # Start the Flask server for tracking in the background
        python news_delivery.py > flask_server.log 2>&1 &
        server_pid=$!
        
        # Wait for server to start and verify it's running
        echo "Waiting for Flask server to start..."
        max_attempts=30
        attempt=0
        while ! curl -s http://localhost:5000/health > /dev/null; do
          if ! ps -p $server_pid > /dev/null; then
            echo "Flask server failed to start. Server log:"
            cat flask_server.log
            exit 1
          fi
          sleep 2
          attempt=$((attempt + 1))
          if [ $attempt -ge $max_attempts ]; then
            echo "Timeout waiting for Flask server. Server log:"
            cat flask_server.log
            exit 1
          fi
          echo "Attempt $attempt: Server not ready yet..."
        done
        
        echo "Flask server is running. Sending emails..."
        # Send emails
        curl -v http://localhost:5000/send_emails
        
        # Wait for emails to be sent
        sleep 30
        
        # Gracefully stop the Flask server
        kill $server_pid
        wait $server_pid
        
        # Check the server logs
        echo "Flask server logs:"
        cat flask_server.log
    
    - name: List files for debugging
      run: ls -R
      
    - name: Upload delivery logs
      uses: actions/upload-artifact@v4
      with:
        name: news-delivery-logs
        path: |
          *.log
          logs/
    
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f firebase-service-account.json
        rm -f .env 